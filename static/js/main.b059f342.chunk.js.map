{"version":3,"sources":["components/atoms/Title.jsx","components/atoms/StretchedButton.jsx","components/atoms/Label.jsx","lib/constants/index.js","components/molecules/BasicModal.jsx","components/molecules/HeroPresenter.jsx","lib/models/Character.jsx","lib/models/TanksList.jsx","lib/models/DpsList.jsx","lib/models/SupportsList.jsx","lib/models/AllChars.jsx","components/pages/RandomGeneratorPage.jsx","components/pages/Errors/404.jsx","Router.jsx","lib/constants/pages/index.js","App.jsx","components/common/Loading.jsx","reportWebVitals.js","lib/nftHandler/nftHandler.js","lib/global/globalState.js","lib/global/observer.js","lib/nftHandler/nftHandlerContext.js","lib/monitor/monitorContext.js","lib/nftDiscovery.js","lib/distiller.js","lib/delay.js","lib/monitor/monitor.js","index.js"],"names":["Title","children","variant","Typography","className","StretchedButton","endIcon","onClick","Button","Label","buildUriSolscanApiGetHolders","nftAddress","require","encode","HeroPresenter","heroName","heroImgUrl","selectionType","Paper","Stack","direction","src","alt","Character","this","TanksList","DpsList","SupportsList","AllChars","generateRandom","list","Math","floor","random","length","RandomGeneratorPage","useState","selectedTank","setSelectedTank","selectedDps","setSelectedDps","selectedSupport","setSelectedSupport","selectedOpen","setSelectedOpen","Container","Box","Grid","container","spacing","item","xs","md","useStyles","makeStyles","theme","icon","width","height","color","palette","secondary","main","display","flexDirection","alignItems","justifyContent","paper","backgroundColor","background","default","margin","button","marginTop","PageNotFound","classes","href","startIcon","darkTheme","createTheme","mode","Router","ThemeProvider","exact","path","component","NotFound","App","PureComponent","backdrop","zIndex","drawer","Loading","props","Backdrop","open","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","NFTHandler","getNFTs","setNFTs","getNFTsCount","handleNFT","nft","reset","GlobalState","Observer","emitNFTEvent","emit","on","EventEmitter","NFTHandlerContext","React","createContext","NFTHandlerProvider","maxNFTsReached","state","nfts","process","_","setState","Provider","value","resetNFTState","Component","Consumer","MonitorContext","MonitorProvider","start","monitor","Monitor","REACT_APP_API_KEY","startBlockNumber","stop","resetMonitorState","blockNumber","latestBlockNumber","isRunning","setStartBlockNumber","NftDiscovery","txCandidates","tx","events","destination","requestToSolscan","axios","get","nftData","metadataUri","data","metadata","uri","getOwnerUri","ownerData","console","log","discoveryData","address","account","error","e","Distiller","block","txs","filter","x","type","getNFTData","delay","ms","Promise","res","setTimeout","apiKey","setBlockNumber","setLatestBlockNumber","UbiquityClient","info","findNFTcandidates","syncApi","currentBlockNumber","PROTOCOL","SOLANA","NETWORKS","MAIN_NET","response","status","config","url","blocksApi","getBlock","ReactDOM","createRoot","document","getElementById","render","currentVersion","pkg","version","isEnabled","isVerboseMode","loadingComponent"],"mappings":"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","file":"static/js/main.b059f342.chunk.js","sourcesContent":["import { Typography } from \"@mui/material\";\n\nexport const Title = ({ children, variant = \"h3\" }) => (\n    <Typography variant={variant} className=\"title\">{children}</Typography>\n);","import { Button } from \"@mui/material\";\n\nexport const StretchedButton = ({ children, endIcon, onClick }) => (\n  <Button\n    className=\"stretched-button\"\n    variant=\"contained\"\n    endIcon={endIcon}\n    onClick={onClick}\n  >\n    {children}\n  </Button>\n);\n","import { Typography } from \"@mui/material\";\n\nexport const Label = ({ children, variant = \"p\" }) => (\n    <Typography variant={variant} className=\"label\">{children}</Typography>\n);","export { homeHash, homeLink, liveMonitorLink } from \"./pages\";\n\nexport const solscanApiGetAccount = \"https://api.solscan.io/account?address=\";\nexport const buildUriSolscanApiGetHolders = (nftAddress) =>\n  `https://public-api.solscan.io/token/holders?tokenAddress=${nftAddress}&offset=0&limit=1`;\nexport const solscanUrl = \"https://solscan.io/token/\";\nexport const lineBreakCode = \"%0A\";\nexport const solscanLinkToAccount = 'https://solscan.io/account/';","import * as React from \"react\";\nimport { Grid, Paper, Modal, Link } from \"@mui/material\";\nimport { Label, ShareTwitterButton } from \"../atoms\";\nimport { solscanUrl, solscanLinkToAccount, lineBreakCode } from \"../../lib/constants\";\nimport { formatRoyalties } from \"../../lib/formatting/numberFormat\";\nconst { encode } = require(\"url-encode-decode\");\nconst modalStyle = {\n  overflow:'scroll',\n};\n\nconst containerStyle = {\n  position: \"relative\",\n  top: \"60%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: \"70%\",\n  maxWidth: \"600px\",\n  p: 4,\n  \"box-shadow\": \"none !important\",\n  \"-webkit-transition\": \"none !important\",\n  transition: \"none !important\",\n  height: 'auto'\n};\n\nexport function BasicModal({ open, setOpen, nftData }) {\n  const handleClose = () => setOpen(false);\n  const ownerAddress = nftData && nftData.ownerData && nftData.ownerData.owner;\n\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n      sx={modalStyle}\n    >\n      <Paper sx={containerStyle} elevation={4} className=\"nft-show\">\n        <Grid container className=\"text-align--center\">\n          <Grid item xs={12}>\n            <div className=\"gradient-shadow\">\n              <Link\n                href={`${solscanUrl}${nftData.address}`}\n                target=\"_blank\"\n                underline=\"none\"\n              >\n                <img\n                  className=\"fungible-token-preview\"\n                  src={nftData.image}\n                  alt={nftData.name}\n                />\n              </Link>\n            </div>\n          </Grid>\n          <Grid item xs={12}>\n            <Label variant=\"h6\">\n              <Link\n                href={`${solscanUrl}${nftData.address}`}\n                target=\"_blank\"\n                underline=\"none\"\n              >\n                {nftData.name}\n              </Link>\n            </Label>\n          </Grid>\n          <Grid item xs={12}>\n            <Link\n              href={`${solscanLinkToAccount}${ownerAddress}`}\n              target=\"_blank\"\n            >\n              <div className=\"text-overflow--ellipsis content-text\">{`Owner: ${ownerAddress}`}</div>\n            </Link>\n          </Grid>\n\n          <Grid item xs={12}>\n            &nbsp;\n          </Grid>\n          <Grid item xs={12}>\n            <Link href={nftData.external_url} target=\"_blank\">\n              <Label variant=\"span\">{nftData.external_url}</Label>\n            </Link>\n          </Grid>\n          <Grid item xs={12}>\n            <Label variant=\"p\">{nftData.description}</Label>\n          </Grid>\n          <Grid item xs={12}>\n            &nbsp;\n          </Grid>\n          <Grid item xs={12}>\n            <Label variant=\"span\">\n              Royalties:{\" \"}\n              {`${formatRoyalties(nftData.seller_fee_basis_points)}%`}\n            </Label>\n          </Grid>\n          <Grid item xs={12}>\n            &nbsp;\n          </Grid>\n          <Grid item xs={12}>\n            <Paper elevation={24} className=\"nft-show nft-show-table\">\n              <Grid container>\n                <Grid item xs={4} className=\"border-bottom--border-color\">\n                  <Label>Attribute</Label>\n                </Grid>\n                <Grid item xs={8} className=\"border-bottom--border-color\">\n                  <Label>Value</Label>\n                </Grid>\n                <Grid item xs={4}>\n                  &nbsp;\n                </Grid>\n                <Grid item xs={8}>\n                  &nbsp;\n                </Grid>\n                {nftData.attributes &&\n                  nftData.attributes.map((attribute, index) => (\n                    <React.Fragment key={`ATTRIBUTE_${index}`}>\n                      <Grid item xs={4}>\n                        <Label>{attribute.trait_type}</Label>\n                      </Grid>\n                      <Grid item xs={8}>\n                        <Label>{attribute.value}</Label>\n                      </Grid>\n                    </React.Fragment>\n                  ))}\n              </Grid>\n            </Paper>\n          </Grid>\n          <Grid item xs={12}>\n            <ShareTwitterButton\n              text={`Take a look at this awesome NFT!${lineBreakCode}${encode(\n                nftData.name\n              )}${lineBreakCode}${lineBreakCode}Royalties: ${encode(\n                `${formatRoyalties(nftData.seller_fee_basis_points)}%`\n              )}${lineBreakCode}${encode(\n                `${solscanUrl}${nftData.address}`\n              )}${lineBreakCode}`}\n              url={nftData.external_url}\n              hashtags=\"SolanaNFT, NFT, UbiquityAPI, UbiquityHackathon23\"\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n}\n","import { Paper, Stack } from \"@mui/material\";\r\nimport { Label } from \"../atoms\";\r\n\r\nexport const HeroPresenter = ({ heroName, heroImgUrl, selectionType }) => (\r\n  <div>\r\n    <Paper className=\"padding--40px hover-animation nft-row\">\r\n      <Stack direction=\"column\">\r\n        <img src={heroImgUrl} alt={heroName} />\r\n        <Label variant=\"h5\">{heroName}</Label>\r\n        <Label variant=\"h5\">{selectionType}</Label>\r\n      </Stack>\r\n    </Paper>\r\n  </div>\r\n);\r\n","export class Character {\r\n  constructor(heroName, heroImgUrl) {\r\n    this.heroName = heroName;\r\n    this.heroImgUrl = `/img/chars/${heroImgUrl}`;\r\n  }\r\n}\r\n","import { Character } from \"./Character\";\r\n\r\nexport const TanksList = [\r\n  new Character(\"DVA\", \"dva.png\"),\r\n  new Character(\"Doomfist\", \"doomfist.png\"),\r\n  new Character(\"Junker Queen\", \"junker-queen.png\"),\r\n  new Character(\"Orisa\", \"orisa.png\"),\r\n  new Character(\"Ramattra\", \"ramattra.png\"),\r\n  new Character(\"Reinhardt\", \"reinhardt.png\"),\r\n  new Character(\"Roadhog\", \"roadhog.png\"),\r\n  new Character(\"Sigma\", \"sigma.png\"),\r\n  new Character(\"Winston\", \"winston.png\"),\r\n  new Character(\"Wrecking Ball\", \"wrecking-ball.png\"),\r\n  new Character(\"Zarya\", \"zarya.png\"),\r\n];\r\n","import { Character } from \"./Character\";\r\n\r\nexport const DpsList = [\r\n  new Character(\"Ashe\", \"ashe.png\"),\r\n  new Character(\"Bastion\", \"bastion.png\"),\r\n  new Character(\"Cassidy\", \"cassidy.png\"),\r\n  new Character(\"Echo\", \"echo.png\"),\r\n  new Character(\"Genji\", \"genji.png\"),\r\n  new Character(\"Hanzo\", \"hanzo.png\"),\r\n  new Character(\"Junkrat\", \"junkrat.png\"),\r\n  new Character(\"Mei\", \"mei.png\"),\r\n  new Character(\"Pharah\", \"pharah.png\"),\r\n  new Character(\"Reaper\", \"reaper.png\"),\r\n  new Character(\"Sojourn\", \"sojourn.png\"),\r\n  new Character(\"Soldier 76\", \"soldier-76.png\"),\r\n  new Character(\"Sombra\", \"sombra.png\"),\r\n  new Character(\"Symmetra\", \"symmetra.png\"),\r\n  new Character(\"Torbjorn\", \"torbjorn.png\"),\r\n  new Character(\"Tracer\", \"tracer.png\"),\r\n  new Character(\"Widowmaker\", \"widowmaker.png\"),\r\n];\r\n","import { Character } from \"./Character\";\r\n\r\nexport const SupportsList = [\r\n  new Character(\"Ana\", \"ana.png\"),\r\n  new Character(\"Baptiste\", \"baptiste.png\"),\r\n  new Character(\"Brigitte\", \"brigitte.png\"),\r\n  new Character(\"Kiriko\", \"kiriko.png\"),\r\n  new Character(\"Lucio\", \"lucio.png\"),\r\n  new Character(\"Mercy\", \"mercy.png\"),\r\n  new Character(\"Moira\", \"moira.png\"),\r\n  new Character(\"Zenyatta\", \"zenyatta.png\"),\r\n];\r\n","import { TanksList } from \"./TanksList\";\r\nimport { DpsList } from \"./DpsList\";\r\nimport { SupportsList } from \"./SupportsList\";\r\n\r\nexport const AllChars = [...TanksList, ...DpsList, ...SupportsList];\r\n","import React, { useState } from \"react\";\r\nimport { StretchedButton, Title } from \"../atoms\";\r\nimport { HeroPresenter } from \"../molecules\";\r\nimport { Container, Box, Grid } from \"@mui/material\";\r\nimport { AllChars, TanksList, DpsList, SupportsList } from \"../../lib/models\";\r\n\r\nconst generateRandom = (list) => {\r\n  return list[Math.floor(Math.random() * list.length)];\r\n};\r\n\r\nexport const RandomGeneratorPage = () => {\r\n  const [selectedTank, setSelectedTank] = useState(generateRandom(TanksList));\r\n  const [selectedDps, setSelectedDps] = useState(generateRandom(DpsList));\r\n  const [selectedSupport, setSelectedSupport] = useState(\r\n    generateRandom(SupportsList)\r\n  );\r\n  const [selectedOpen, setSelectedOpen] = useState(generateRandom(AllChars));\r\n\r\n  const onRandomizeClick = () => {\r\n    setSelectedTank(generateRandom(TanksList));\r\n    setSelectedDps(generateRandom(DpsList));\r\n    setSelectedSupport(generateRandom(SupportsList));\r\n    setSelectedOpen(generateRandom(AllChars));\r\n  };\r\n\r\n  return (\r\n    <Container className=\"text-align--center\">\r\n      <Title>Overwatch 2 - Random Char Selector</Title>\r\n      <Title variant=\"h6\">\r\n        Hi!. Im h4vok. I always played flex and all characters. And I always\r\n        wanted a \"Random\" selector in overwatch. Tired of waiting, I created my\r\n        own. Enjoy!\r\n      </Title>\r\n      <Title variant=\"h6\">&nbsp;</Title>\r\n\r\n      <Box className=\"box\">\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={3}>\r\n            <HeroPresenter\r\n              heroName={selectedTank.heroName}\r\n              heroImgUrl={selectedTank.heroImgUrl}\r\n              selectionType=\"Tank\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <HeroPresenter\r\n              heroName={selectedDps.heroName}\r\n              heroImgUrl={selectedDps.heroImgUrl}\r\n              selectionType=\"DPS\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <HeroPresenter\r\n              heroName={selectedSupport.heroName}\r\n              heroImgUrl={selectedSupport.heroImgUrl}\r\n              selectionType=\"Support\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <HeroPresenter\r\n              heroName={selectedOpen.heroName}\r\n              heroImgUrl={selectedOpen.heroImgUrl}\r\n              selectionType=\"Open Queue\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        &nbsp;\r\n        <StretchedButton onClick={onRandomizeClick}>Randomize</StretchedButton>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Home from '@material-ui/icons/Home';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    width: 192,\n    height: 192,\n    color: theme.palette.secondary.main,\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.default,\n    margin: 0,\n    height: `calc(100vh - 64px)`,\n  },\n  button: {\n    marginTop: 20,\n  },\n}));\n\nconst PageNotFound = () => {\nconst classes = useStyles();\n  return (\n      <Paper className={classes.paper}>\n        <div className={classes.container}>\n          <Typography variant=\"h4\">\n            404\n          </Typography>\n            Page not found.\n          <Typography variant=\"subtitle1\">\n          </Typography>\n          <Button\n            color=\"secondary\"\n            aria-label=\"home\"\n            href=\"/\"\n            className={classes.button}\n            startIcon={<Home />}\n          >\n            Home\n          </Button>\n        </div>\n      </Paper>\n  )\n}\n\n\nexport default PageNotFound;","import React from \"react\";\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\nimport { RandomGeneratorPage } from \"./components/pages\";\nimport NotFound from \"./components/pages/Errors/404\";\nimport { homeLink, liveMonitorLink } from \"./lib/constants\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"light\",\n  },\n});\n\nconst Router = ({ children }) => {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <HashRouter>\n        <Switch>\n          <Route exact path={homeLink} component={RandomGeneratorPage} />\n          <Route component={NotFound} />\n          {children}\n        </Switch>\n      </HashRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default Router;\n","const homeHash = \"#/\"\nconst homeLink = \"/\"\nconst liveMonitorLink = \"/monitor\";\n\nexport { homeHash, homeLink, liveMonitorLink }","import { PureComponent } from \"react\";\nimport { Container } from '@mui/material';\nimport Router from \"./Router\";\n\nexport class App extends PureComponent {\n  render() {\n    return (\n      <>\n        <div className=\"bg\"></div>\n        <div className=\"bg bg2\"></div>\n        <div className=\"bg bg3\"></div>\n        <Container className=\"content\">\n          <Router />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n}));\n\nconst Loading = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Backdrop className={classes.backdrop} open={props.open}>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  );\n};\n\nexport default Loading;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export class NFTHandler {\n  #getNFTs\n  #setNFTs\n\n  constructor(getNFTs, setNFTs) {\n    this.#getNFTs = getNFTs\n    this.#setNFTs = setNFTs\n  }\n  \n  getNFTsCount = () => this.#getNFTs().length\n  \n  handleNFT = (nft) => this.#setNFTs([...this.#getNFTs(), nft])\n\n  reset = () => this.#setNFTs([])\n}\n","import { Observer } from './observer'\n\nexport const GlobalState = {\n  NFTHandler: null,\n  Observer:  new Observer()\n};\n\nexport const resetNFTState = () => {\n  if (GlobalState.NFTHandler.getNFTsCount() > 0) {\n    GlobalState.NFTHandler.reset()\n  }\n}","import { EventEmitter } from 'events'\nimport { GlobalState } from '../global'\n\nexport class Observer {\n  #eventEmitter\n  #NFT_EVENT_KEY\n\n  constructor() {\n    this.#eventEmitter = new EventEmitter()\n    this.#NFT_EVENT_KEY = 'nft_event'\n    this.#onNFTEvent()\n  }\n\n  emitNFTEvent = (nft) => this.#eventEmitter.emit(this.#NFT_EVENT_KEY, nft)\n\n  #onNFTEvent = () => this.#eventEmitter.on(this.#NFT_EVENT_KEY, (nft) => GlobalState.NFTHandler.handleNFT(nft))\n}\n","import React  from 'react'\nimport * as _ from 'lodash'\nimport { NFTHandler } from \"./nftHandler\"\nimport { GlobalState } from '../global'\n\nconst NFTHandlerContext = React.createContext(null)\n\nclass NFTHandlerProvider extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      nfts: []\n    }\n\n    GlobalState.NFTHandler = new NFTHandler(\n      this.#getNFTs,\n      this.#setNFTs\n    )\n  }\n\n  maxNFTsReached = () => this.state.nfts.length >= process.env.REACT_APP_MAX_NFTS\n\n  #getNFTs = () => _.clone(this.state.nfts, false)\n\n  #setNFTs = (nfts) => {\n    this.setState(() => ({\n      nfts,\n    }))\n  }\n\n  render() {\n    return (\n      <NFTHandlerContext.Provider\n        value={{\n          ...this.state,\n          resetNFTState: this.resetNFTState,\n          maxNFTsReached: this.maxNFTsReached\n        }}\n      >\n        {this.props.children}\n      </NFTHandlerContext.Provider>\n    )\n  }\n}\n\nconst NFTHandlerConsumer = NFTHandlerContext.Consumer\n\nexport { NFTHandlerProvider, NFTHandlerConsumer, NFTHandlerContext }\n","import React  from 'react'\nimport { Monitor } from \"../monitor\"\n\nconst MonitorContext = React.createContext(null)\n\nclass MonitorProvider extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      monitor: null,\n      startBlockNumber: -1,\n      blockNumber: 0,\n      latestBlockNumber: 0\n    }\n  }\n\n  start = async () => {\n    this.setState(() => ({\n      monitor: new Monitor(\n        process.env.REACT_APP_API_KEY,\n        this.#setBlockNumber,\n        this.#setLatestBlockNumber\n      )\n    }), async () => await this.state.monitor.start(this.state.startBlockNumber))\n  }\n\n  stop = () => this.state.monitor.stop()\n\n  resetMonitorState = () => {\n    this.stop()\n    this.setState(() => ({\n      monitor: null,\n      blockNumber: 0,\n      latestBlockNumber: 0\n    }))\n  }\n\n  isRunning = () => this.state.monitor && this.state.monitor.isRunning()\n  \n  setStartBlockNumber = (startBlockNumber) => {\n    this.setState(() => ({\n      startBlockNumber\n    }))\n  }\n\n  #setBlockNumber = (blockNumber) => {\n    this.setState(() => ({\n      blockNumber\n    }))\n  }\n\n  #setLatestBlockNumber = (latestBlockNumber) => {\n    this.setState(() => ({\n      latestBlockNumber\n    }))\n  }\n\n  render() {\n    return (\n      <MonitorContext.Provider\n        value={{\n          ...this.state,\n          start: this.start,\n          stop: this.stop,\n          setStartBlockNumber: this.setStartBlockNumber,\n          resetMonitorState: this.resetMonitorState,\n          isRunning: this.isRunning\n        }}\n      >\n        {this.props.children}\n      </MonitorContext.Provider>\n    )\n  }\n}\n\nconst MonitorConsumer = MonitorContext.Consumer\n\nexport { MonitorProvider, MonitorConsumer, MonitorContext }\n","import axios from \"axios\";\nimport {\n  solscanApiGetAccount,\n  buildUriSolscanApiGetHolders,\n} from \"./constants\";\nimport { GlobalState } from \"./global\";\n\nexport class NftDiscovery {\n  async getNFTData(txCandidates) {\n    for (var tx of txCandidates) {\n      try {\n        const nftAddress = tx.events[1].destination;\n\n        const requestToSolscan = `${solscanApiGetAccount}${nftAddress}`;\n\n        const nftData = await axios.get(requestToSolscan);\n\n        // Now we bring the data from arweave\n        const metadataUri = nftData.data.data.metadata.data.uri;\n\n        const { data } = await axios.get(metadataUri);\n\n        // We bring the current owner information\n        const getOwnerUri = buildUriSolscanApiGetHolders(nftAddress);\n        const ownerData = await axios.get(getOwnerUri);\n\n        data.ownerData = ownerData.data.data[0];\n        console.log({ discoveryData: data });\n\n        GlobalState.Observer.emitNFTEvent({\n          ...data,\n          address: nftData.data.data.account,\n        });\n      } catch (e) {\n        console.error({ e });\n      }\n    }\n  }\n}\n","import { NftDiscovery } from \"./nftDiscovery\";\n\nexport class Distiller {\n  #nftDiscovery;\n\n  constructor() {\n    this.#nftDiscovery = new NftDiscovery();\n  }\n\n  async findNFTcandidates(block) {\n    const txCandidates = block.txs.filter(\n      (x) => x.events.length === 6 && x.events[1].type === \"create_account\"\n    );\n\n    if (txCandidates) {\n      this.#nftDiscovery.getNFTData(txCandidates);\n    }\n  }\n}\n","export const delay = (ms) => new Promise((res) => setTimeout(res, ms))\n","import { UbiquityClient, NETWORKS, PROTOCOL } from \"@ubiquity/ubiquity-ts-client\"\nimport { Distiller } from \"../distiller\"\nimport { delay } from '../delay'\n\nexport class Monitor {\n    #running\n    #client\n    #distiller\n    #setBlockNumber\n    #setLatestBlockNumber\n\n    constructor(apiKey, setBlockNumber, setLatestBlockNumber) {\n      this.#client= new UbiquityClient(apiKey)\n      this.#distiller = new Distiller()\n      this.#setBlockNumber = setBlockNumber\n      this.#setLatestBlockNumber = setLatestBlockNumber\n    }\n\n    async start(startBlockNumber) {\n      console.log('Running monitor')\n\n      const latestBlockNumber = await this.#getLatestBlockNumber()\n      let blockNumber = startBlockNumber === 'current' ? latestBlockNumber : startBlockNumber\n      this.#setLatestBlockNumber(latestBlockNumber)\n      this.#running = true\n\n      while (latestBlockNumber >= blockNumber && this.isRunning()) {\n        console.log(`Monitoring on block number: ${blockNumber}`)\n\n        if (blockNumber === -1) blockNumber = latestBlockNumber\n        this.#setBlockNumber(blockNumber)\n  \n        // Cancel monitoring if we have reached the ending block\n        // which is only used for debugging purposes\n        if (!!latestBlockNumber && blockNumber > latestBlockNumber)\n          return\n  \n        console.info(`${blockNumber} / ${latestBlockNumber}`)\n  \n        const block = await this.#getBlock(blockNumber)\n        if (block) {\n          await this.#distiller.findNFTcandidates(block)\n        }\n  \n        blockNumber++\n\n        await delay(1000)\n      }\n\n      if (!this.isRunning()) {\n        return\n      }\n  \n      setTimeout(async () => await this.start(latestBlockNumber), 1000)\n    }\n\n    stop = () => this.#running = false\n\n    isRunning = () => this.#running\n\n    async #getLatestBlockNumber() {\n      console.log(\"getLatestBlockNumber\")\n\n      try {\n        const { data } = await this.#client\n                                    .syncApi\n                                    .currentBlockNumber(PROTOCOL.SOLANA, NETWORKS.MAIN_NET)\n        \n        console.log({data})\n        return data\n      } catch (e) {\n        console.log(`error code::${e.response.status} url::${e.config.url}`)\n      }\n    }\n\n    async #getBlock(blockNumber) {\n      console.log(\"getBlock\")\n\n      try {\n        const { data } = await this.#client\n                                      .blocksApi\n                                      .getBlock(PROTOCOL.SOLANA, NETWORKS.MAIN_NET, blockNumber)\n        console.log({data})\n\n        return data\n      } catch (e) {\n        console.log(`error code::${e.response.status} url::${e.config.url}`)\n      }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport pkg from '../package.json';\nimport './index.css';\nimport './background.css';\nimport './gradientShadow.css';\nimport App from './App';\nimport Loading from './components/common/Loading'\nimport CacheBuster from 'react-cache-buster';\nimport reportWebVitals from './reportWebVitals';\nimport { NFTHandlerProvider } from './lib/nftHandler'\nimport { MonitorProvider } from './lib/monitor'\n\nconst isProduction = process.env.NODE_ENV === 'production'\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <CacheBuster\n    currentVersion={pkg.version}\n    isEnabled={isProduction} //If false, the library is disabled.\n    isVerboseMode={false} //If true, the library writes verbose logs to console.\n    loadingComponent={<Loading open={true} />} //If not pass, nothing appears at the time of new version check.\n  >\n    <MonitorProvider>\n      <NFTHandlerProvider>\n        <App />\n      </NFTHandlerProvider>\n    </MonitorProvider>\n  </CacheBuster>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}